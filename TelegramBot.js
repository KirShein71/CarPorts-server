import { Telegraf } from 'telegraf';
import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';
import jwt from 'jsonwebtoken';

dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.JWT_SECRET) {
  throw new Error('Missing required environment variables');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sequelize —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∏–∞–ª–µ–∫—Ç–∞
const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    dialect: 'postgres', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–µ–∫—Ç
    port: process.env.DB_PORT || 5432,
    logging: false // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
  }
);


const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

const userStates = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  try {
    const chatId = ctx.message.chat.id;
    userStates.set(chatId, { step: 'awaiting_phone' });
    await ctx.reply('üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89112223344');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start:', error);
  }
});

bot.command('getlink', async (ctx) => {
  try {
    const chatId = ctx.message.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
    const [user] = await sequelize.query(`
      SELECT id, phone FROM users WHERE telegram_chat_id = :chatId
    `, {
      replacements: { chatId },
      type: sequelize.QueryTypes.SELECT
    });

    if (!user) {
      await ctx.reply('ü§∑‚Äç‚ôÇÔ∏è –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { 
        userId: user.id,
        chatId: chatId,
        exp: Math.floor(Date.now() / 1000) + 900 // —Å–Ω–æ–≤–∞ 15 –º–∏–Ω—É—Ç
      },
      process.env.JWT_SECRET
    );

    const personalAccountLink = `${process.env.FRONTEND_URL}/personalaccount?token=${token}`;
    
    await ctx.replyWithHTML(
      'üîë –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (–¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç):\n\n' +
      `<a href="${personalAccountLink}">üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>`
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ getlink:', error);
    await ctx.reply('üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
bot.on('text', async (ctx) => {
  const chatId = ctx.message.chat.id;
  const userState = userStates.get(chatId);
  
  if (userState?.step === 'awaiting_phone') {
    const phone = String(ctx.message.text.trim()).replace(/\D/g, '');
    
    if (!/^89\d{9}$/.test(phone)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89112223344');
      return;
    }

    try {
      const [user] = await sequelize.query(`
        SELECT id FROM users WHERE phone = :phone
      `, {
        replacements: { phone },
        type: sequelize.QueryTypes.SELECT
      });

      if (!user) {
        await ctx.reply('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–≤—è–∑–∫—É
      const [existingLink] = await sequelize.query(`
        SELECT id FROM users WHERE phone = :phone AND telegram_chat_id IS NOT NULL
      `, {
        replacements: { phone },
        type: sequelize.QueryTypes.SELECT
      });

      if (existingLink) {
        await ctx.reply('‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ –ë–î
      const [updatedCount] = await sequelize.query(`
        UPDATE users 
        SET telegram_chat_id = :chatId 
        WHERE phone = :phone
        RETURNING id
      `, {
        replacements: { chatId, phone },
        type: sequelize.QueryTypes.UPDATE
      });

      if (updatedCount.length > 0) {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign(
          { 
            userId: user.id,
            chatId: chatId,
            exp: Math.floor(Date.now() / 1000) + 900 // 15 –º–∏–Ω—É—Ç
          },
          process.env.JWT_SECRET // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ .env
        );

        const personalAccountLink = `${process.env.FRONTEND_URL}/personalaccount?token=${token}`;
        
        await ctx.replyWithHTML(
          '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω\n\n' +
          `<a href="${personalAccountLink}">üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>`
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      await ctx.reply('üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    } finally {
      userStates.delete(chatId);
    }
  }
});

bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
});

bot.telegram.setMyCommands([
  { command: 'start', description: '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É' },
  { command: 'getlink', description: '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞' },
]);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));

export default bot;